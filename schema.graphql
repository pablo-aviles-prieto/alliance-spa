schema {
  query: Query
  mutation: Mutation
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type Image {
  author: String
  createdAt: ISO8601DateTime
  id: ID!
  liked: Boolean
  likesCount: Int
  picture: String
  price: Int
  title: String
  updatedAt: ISO8601DateTime
}

"""The connection type for Image."""
type ImageConnection {
  """A list of edges."""
  edges: [ImageEdge]
  """A list of nodes."""
  nodes: [Image]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ImageEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Image
}

"""Autogenerated input type of LikeImage"""
input LikeImageInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  imageId: ID!
}

"""Autogenerated return type of LikeImage."""
type LikeImagePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  image: Image!
}

type Mutation {
  likeImage(
    """Parameters for LikeImage"""
    input: LikeImageInput!
  ): LikeImagePayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  images(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    title: String
  ): ImageConnection!
}